---
apiVersion: v1
kind: Namespace
metadata:
  name: clever-operator-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: clever-operator
  name: clever-operator
  namespace: clever-operator-system
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: clever-operator
  namespace: clever-operator-system
spec:
  minAvailable: 0
  selector:
    matchLabels:
      app: clever-operator
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: clever-operator
  namespace: clever-operator-system
spec:
  podSelector:
    matchLabels:
      app: clever-operator
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - {}
  egress:
    - {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: clever-operator-system
  name: clever-operator-configuration
data:
  config.toml: |
    [api]
    token = ""
    secret = ""
    consumerKey = ""
    consumerSecret = ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: clever-operator-system
  name: clever-operator
  labels:
    app: clever-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: clever-operator
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '7080'
      labels:
        app: clever-operator
    spec:
      serviceAccountName: clever-operator
      automountServiceAccountToken: true
      volumes:
      - name: config
        configMap:
          name: clever-operator-configuration
          items:
          - key: "config.toml"
            path: "config.toml"
      containers:
        - image: clevercloud/clever-operator:d5b80aa746ce6ada80e60f9b384b1383cddc695b
          imagePullPolicy: Always
          name: clever-operator
          volumeMounts:
          - name: config
            mountPath: "/etc/clever-operator"
            readOnly: true
          resources:
            requests:
              memory: 64M
              cpu: 100m
            limits:
              memory: 64M
              cpu: 100m
          ports:
            - containerPort: 7080
              protocol: TCP
              name: observability
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: observability
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsGroup: 25000
            runAsUser: 20000
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
